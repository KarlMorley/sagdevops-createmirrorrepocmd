package com.saguk.cce.tools;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class CompositeTemplateParser {
  private Map<String, ArrayList<String>> yamlTemplateMap;
 

  /**
   * Create the CompositeTemplateParser instance. 
   * @param yamlParserMap Dynamic data structure generated by SnakeYAML
   */
  @SuppressWarnings("unchecked")
  public CompositeTemplateParser(Map<String, ArrayList<String>> yamlParserMap) {
    yamlTemplateMap = (Map<String, ArrayList<String>>) yamlParserMap.get("templates");
    if (yamlTemplateMap == null) {
      System.err.println("No YAML templates found!");
    }
  }


  /**
   * @return String array containing product names found within the template
   */
  @SuppressWarnings("unchecked")
  public List<String> getProducts() {
    Iterator<ArrayList<String>> templateIterator = yamlTemplateMap.values().iterator();
    Map<String, ArrayList<String>> template = null;
    List<String> productList = new ArrayList<String>();
    String productName;
    
    while (templateIterator != null && templateIterator.hasNext()) {
      template = (Map<String, ArrayList<String>>) templateIterator.next();

      Map<String, ArrayList<String>> productMap = 
          (Map<String, ArrayList<String>>) template.get("products");
      if (productMap != null) {
        Iterator<String> keysIterator = productMap.keySet().iterator();
        while (keysIterator != null && keysIterator.hasNext()) {
          productName = keysIterator.next();
          if (productName != null) {
            productList.add(productName);
          }
        }
      }
    }

    // Remove duplicate products 
    if (productList != null) {
      productList = productList.stream().distinct().collect(Collectors.toList());
    }
    return productList;
  }

}
